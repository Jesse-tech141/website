name: CI Pipeline

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build-and-test:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        npm install
        npm install jest-junit --save-dev
    
    - name: Run tests with JUnit output
      id: tests
      run: |
        npx jest --ci --reporters=default --reporters=jest-junit --outputFile=junit.xml
    
    - name: Publish test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ github.run_id }}
        path: junit.xml
    
    - name: Install HTML validator
      shell: pwsh
      run: |
        mkdir -p tools
        $retryCount = 0
        $maxRetries = 3
        $downloaded = $false
        
        while ($retryCount -lt $maxRetries -and !$downloaded) {
            try {
                Invoke-WebRequest -Uri "https://github.com/validator/validator/releases/latest/download/vnu.jar" -OutFile "tools/vnu.jar"
                if (Test-Path "tools/vnu.jar") {
                    $downloaded = $true
                }
            } catch {
                $retryCount++
                Start-Sleep -Seconds 10
            }
        }
        
        if (!$downloaded) {
            Write-Host "::warning::Validator download failed after $maxRetries attempts"
            exit 0
        }
    
    - name: Run HTML validation
      shell: pwsh
      if: steps.tests.outcome == 'success'
      run: |
        if (Test-Path "tools/vnu.jar") {
            java -jar tools/vnu.jar --format xml --errors-only --skip-non-html . > html-validation-results.xml
        } else {
            Write-Host "::warning::Skipping HTML validation - validator not available"
            exit 0
        }
    
    - name: Publish HTML validation results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: html-validation-results-${{ github.run_id }}
        path: html-validation-results.xml
    
    - name: Run ESLint
      run: |
        npx eslint script.js -f html -o eslint-report.html --fix || echo "::warning::ESLint found issues"
    
    - name: Publish ESLint report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: eslint-report-${{ github.run_id }}
        path: eslint-report.html
    
    - name: Build project
  if: steps.tests.outcome == 'success'
  shell: pwsh
  run: |
    mkdir -p dist
    Copy-Item -Path *.html -Destination dist/ -ErrorAction SilentlyContinue
    Copy-Item -Path *.css -Destination dist/ -ErrorAction SilentlyContinue
    Copy-Item -Path *.js -Destination dist/ -ErrorAction SilentlyContinue
    Copy-Item -Path images -Destination dist/ -Recurse -ErrorAction SilentlyContinue
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      if: steps.tests.outcome == 'success'
      with:
        name: website-build-${{ github.run_id }}
        path: dist/